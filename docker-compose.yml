version: '3.8'

services:
  postgres:
    container_name: postgres-rest
    image: postgres:15.1-alpine
    restart: on-failure
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d","postgres-rest" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    ports:
      - "6379:6379"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:alpine
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/data
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3


  resto_back:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: resto_back
    depends_on:
       postgres:
         condition: service_healthy
       redis:
         condition: service_healthy
       rabbitmq:
         condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    restart: always
    tty: true
    ports:
      - "8000:8000"
    entrypoint: /app/entrypoint.sh

  celery:
    build: .
    command: celery -A src.celery_settings.celery_config worker -l info --pool=solo
    depends_on:
      - resto_back
      - rabbitmq
  celery_beat:
    build: .
    volumes:
      - celery_beat:/data
    command: celery -A src.celery_settings.celery_config beat
    depends_on:
      - resto_back
      - rabbitmq


volumes:
  postgres_data:
  redis_data:
  celery_beat:
  rabbitmq_data:
